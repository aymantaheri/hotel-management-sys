name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [auth-service, room-service, reservation-service]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend/${{ matrix.service }}
        npm ci
    
    - name: Run linting
      run: |
        cd backend/${{ matrix.service }}
        npm run lint
    
    - name: Run tests
      run: |
        cd backend/${{ matrix.service }}
        npm run test
    
    - name: Build application
      run: |
        cd backend/${{ matrix.service }}
        npm run build

  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/hotel-frontend-react/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/hotel-frontend-react
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend/hotel-frontend-react
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/hotel-frontend-react/dist

  docker-build:
    needs: [lint-and-test, frontend-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Auth Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/auth-service
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hotel-auth-service:latest
    
    - name: Build and push Room Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/room-service
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hotel-room-service:latest
    
    - name: Build and push Reservation Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/reservation-service
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hotel-reservation-service:latest
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend/hotel-frontend-react
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hotel-frontend:latest

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-west-2 --name hotel-management-cluster
        kubectl apply -f k8s/
        kubectl rollout restart deployment/auth-service
        kubectl rollout restart deployment/room-service
        kubectl rollout restart deployment/reservation-service
        kubectl rollout restart deployment/frontend

